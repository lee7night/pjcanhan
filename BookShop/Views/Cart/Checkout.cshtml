@model BookShop.Models.DTOs.CheckoutModel

@{
    ViewData["Title"] = "Checkout";
}

<h2>Checkout</h2>
<hr />
<form asp-action="Checkout" method="post"> <!-- Make sure this method aligns with your controller routing -->
    <div class="row">
        <div class="col-md-6">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="py-2">
                <label asp-for="Name">Name*</label>
                <input type="text" class="form-control" asp-for="Name" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="py-2">
                <label asp-for="Email">Email*</label>
                <input type="text" class="form-control" asp-for="Email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="py-2">
                <label asp-for="MobileNumber">Mobile Number*</label>
                <input type="text" class="form-control" asp-for="MobileNumber" />
                <span asp-validation-for="MobileNumber" class="text-danger"></span>
            </div>

            <div class="py-2">
                <label asp-for="Address">Address*</label>
                <textarea class="form-control" asp-for="Address" rows="5"></textarea>
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="py-2">
                <label asp-for="Note" class="control-label"></label>
                <textarea asp-for="Note" class="form-control" rows="3"></textarea>
                <span asp-validation-for="Note" class="text-danger"></span>
            </div>

            <div class="py-2">
                <label>Payment Method*</label>
                <select asp-for="PaymentMethod" class="form-select" aria-label="Payment method">
                    <option value="">Select Payment Method</option>
                    <option value="VNPay">VNPay</option> <!-- Assuming you're keeping VNPay as an option -->
                    @foreach (var method in Enum.GetValues(typeof(BookShop.Constants.PaymentMethods)))
                    {
                        <option value="@method.ToString()">@method.ToString()</option>
                    }
                </select>
                <span asp-validation-for="PaymentMethod" class="text-danger"></span>
            </div>

            <div class="py-2 mt-3">
                <input type="submit" value="Submit" class="btn btn-primary" />
            </div>
        </div>

        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="amount" class="control-label"></label>
                <div class="input-group">
                    <span class="input-group-text">VND</span>
                    <input onkeyup="formatCurrencyAndConvertToWords(this);" type="text" asp-for="amount"
                        class="form-control vnd-input" />
                </div>
                <i id="text_amount"></i>
                <span asp-validation-for="amount" class="text-danger"></span>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        function formatCurrencyAndConvertToWords(input) {
            // Remove all non-digit characters  
            let value = input.value.replace(/\D/g, '');

            // Kiểm tra số ký tự không vượt quá 9  
            if (value.length > 9) {
                value = value.slice(0, 9);
            }

            // Format number with thousand separators  
            input.value = value.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

            // Convert number to words and display  
            document.getElementById('text_amount').innerText = capitalizeFirstLetter(numberToWords(value)) + ' đồng';
        }

        function numberToWords(num) {
            const units = ["", "một", "hai", "ba", "bốn", "năm", "sáu", "bảy", "tám", "chín"];
            const teens = ["mười", "mười một", "mười hai", "mười ba", "mười bốn", "mười lăm", "mười sáu", "mười bảy", "mười tám", "mười chín"];
            const tens = ["", "", "hai mươi", "ba mươi", "bốn mươi", "năm mươi", "sáu mươi", "bảy mươi", "tám mươi", "chín mươi"];
            const thousands = ["", "nghìn", "triệu", "tỷ"];

            if (num === "0") return "không";

            let words = '';
            let k = 0;

            while (num.length > 0) {
                let chunk = parseInt(num.slice(-3), 10);
                num = num.slice(0, -3);

                if (chunk) {
                    let chunkWords = '';
                    if (chunk > 99) {
                        chunkWords += units[Math.floor(chunk / 100)] + " trăm ";
                        chunk %= 100;
                    }
                    if (chunk > 19) {
                        chunkWords += tens[Math.floor(chunk / 10)] + " ";
                        chunk %= 10;
                    } else if (chunk > 9) {
                        chunkWords += teens[chunk - 10] + " ";
                        chunk = 0;
                    }
                    if (chunk > 0) {
                        chunkWords += units[chunk] + " ";
                    }
                    words = chunkWords + thousands[k] + " " + words;
                }
                k++;
            }

            return words.trim();
        }

        function capitalizeFirstLetter(text) {
            // Chuyển đổi chữ cái đầu tiên của câu thành chữ hoa  
            return text.charAt(0).toUpperCase() + text.slice(1);
        }  
    </script>


}